name: staging-verify

on:
  workflow_dispatch:
    inputs:
      testing_url:
        description: "Testing App base URL"
        required: true
        default: "https://testing-app.staging"
      backend_url:
        description: "Forge1 Backend base URL"
        required: true
        default: "https://api.staging"
  repository_dispatch:
    types: [backend_deploy_complete]

jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Run Functional-Core suite and collect
        id: run
        env:
          TESTING_URL: ${{ github.event.inputs.testing_url || 'https://testing-app.staging' }}
          BACKEND_URL: ${{ github.event.inputs.backend_url || 'https://api.staging' }}
          TESTING_SERVICE_KEY: ${{ secrets.TESTING_SERVICE_KEY }}
        run: |
          set -euo pipefail
          API="$TESTING_URL/api/v1"
          SID=$(curl -s -H "X-Testing-Service-Key: $TESTING_SERVICE_KEY" "$API/suites" | jq -r '.[] | select(.name=="Functional-Core") | .id')
          if [ -z "$SID" ]; then echo "Functional-Core suite not found"; exit 2; fi
          RES=$(curl -s -H "X-Testing-Service-Key: $TESTING_SERVICE_KEY" -H 'Content-Type: application/json' -d "{\"suite_id\": $SID, \"target_api_url\": \"$BACKEND_URL\"}" "$API/runs")
          RID=$(echo "$RES" | jq -r '.run_id')
          INFO=$(curl -s -H "X-Testing-Service-Key: $TESTING_SERVICE_KEY" "$API/runs/$RID")
          echo "$INFO" > run.json
          STATUS=$(jq -r '.run.status' run.json)
          REPORT=$(jq -r '.signed_report_url' run.json)
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "report=$REPORT" >> $GITHUB_OUTPUT
          echo "rid=$RID" >> $GITHUB_OUTPUT
          echo "Run $RID status: $STATUS | Report: $TESTING_URL$REPORT"

      - name: Create issue on failure
        if: ${{ steps.run.outputs.status != 'pass' }}
        uses: actions/github-script@v7
        env:
          REPORT_PATH: ${{ steps.run.outputs.report }}
          TESTING_URL: ${{ github.event.inputs.testing_url || 'https://testing-app.staging' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reportUrl = `${process.env.TESTING_URL}${process.env.REPORT_PATH}`;
            const title = `Staging verify failed: Functional-Core`;
            const body = `Functional-Core failed in staging verification.\n\nReport: ${reportUrl}`;
            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body });

      - name: Enforce pass
        if: ${{ steps.run.outputs.status != 'pass' }}
        run: |
          echo "Functional-Core FAILED"
          exit 1


